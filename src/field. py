class Field:
    def __init__(self):
        self.field = [[None for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]

    def draw(self, screen):
          # 背景をクリア
        screen.fill(BACKGROUND_COLOR)

          # 盤面のグリッド描画
        for x in range(GRID_WIDTH):
            for y in range(GRID_HEIGHT):
                rect = pygame.Rect(
                    x * CELL_SIZE + BOARD_ MARGIN,
                    y * CELL_SIZE + BOARD_ MARGIN,
                    CELL_SIZE,
                    CELL_SIZE
                  )
                pygame.draw.rect(screen, GRID_COLOR, rect, 1)

          # ボーダー描画
        border_rect = pygame.Rect(
            BOARD_ MARGIN - BORDER_ WIDTH,
            BOARD_ MARGIN - BORDER_ WIDTH,
              (GRID_ WIDTH * CELL_ SIZE) + 2 * BORDER_ WIDTH,
              (GRID_ HEIGHT * CELL_ SIZE) + 2 * BORDER_ WIDTH
          )
        pygame.draw.rect(screen, BORDER_ COLOR, border_rect)

          # ガイドライン描画（中心線）
        center_x = (GRID_ WIDTH * CELL_ SIZE) // 2 + BOARD_ MARGIN
        center_y = (GRID_ HEIGHT * CELL_ SIZE) // 2 + BOARD_ MARGIN
        pygame.draw.line(
            screen,
            GUIDE_ LINE_ COLOR,
              (center_x, BOARD_ MARGIN),
              (center_x, GRID_ HEIGHT * CELL_ SIZE + BOARD_ MARGIN),
            1
          )
        pygame.draw.line(
            screen,
            GUIDE_ LINE_ COLOR,
              (BOARD_ MARGIN, center_y),
              (GRID_ WIDTH * CELL_ SIZE + BOARD_ MARGIN, center_y),
            1
          )

    def set_puyo(self, x, y, puyo): 
           # 位置(x,y)にぷよを設置
        if self.is_settable(x, y):
            self.field[y][x] = puyo
            return True
        return False

    def is_settable(self, x, y):
        return self.field[y][x] is None

    def delete_connected_puyo(self):
         # 連結しているぷよを消去する処理をここに実装
        pass

    def apply_gravity(self):
         # 上のぷよを落下させる処理をここに実装
        pass

    def check_game_over(self):
         # ゲームオーバー判定をここに実装
        pass
